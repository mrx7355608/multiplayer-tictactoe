<style>
    #board {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 130px;
        height: 130px;
        flex-wrap: wrap;
    }

    .cell {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        border: 1px solid black;
        cursor: pointer;
    }

    .cell:hover {
        background-color: lightgray;
    }
</style>
<h1>Room page</h1>
<p id="user1-name">User 1: Waiting for a user to join...</p>
<p id="user2-name">User 2: Waiting for a user to join...</p>
<div id="game-over-screen"></div>
<div id="board"></div>
<div id="rematch-div"></div>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io({ autoReconnect: false });

    socket.emit("play-game")

    const user1Name = document.getElementById("user1-name");
    const user2Name = document.getElementById("user2-name");
    const boardDiv = document.getElementById("board");
    const gameOverScreen = document.getElementById("game-over-screen");
    const rematchDiv = document.getElementById("rematch-div");

    socket.on("new-user-joined", ({ room }) => {
        if (room.user1) {
            user1Name.innerText = `User 1: ${room.user1}`
        }
        if (room.user2) {
            user2Name.innerText = `User 2: ${room.user2}`;
        }
    })

    socket.on("player-left", ({ room }) => {
        if (room.user1 === null) {
            user1Name.innerText = `User 1: left the game`
        }
        if (room.user2 === null) {
            user2Name.innerText = `User 2: left the game`;
        }
        clearBoard();
    })

    socket.on("start-game", ({ room }) => {
        drawBoard(room.board);
    })

    function drawBoard(board) {
        for(let i = 0; i < 3; i++) {
            for(let j = 0; j < 3; j++) {
                const boardCell = document.createElement("div");
                boardCell.setAttribute("class", "cell");

                boardCell.innerText = board[i][j];


                if(board[i][j]) {
                    boardCell.innerText = board[i][j];
                    boardCell.removeEventListener("click", () => {
                        makeMove(i, j);
                    })
                } else {
                    boardCell.innerText = "";
                    boardCell.addEventListener("click", () => {
                        makeMove(i, j);
                    })
                }
                boardDiv.appendChild(boardCell);
            }
        }
    }

    function clearBoard() {
        Array.from(boardDiv.childNodes).forEach(e => {
            e.remove();
        })
    }

    function makeMove(row, col) {
        socket.emit("player-made-a-move", { row, col });
    }


    socket.on("board-updated", ({ board }) => {
        clearBoard();
        drawBoard(board);
    })

    socket.on("game-over", ({ winner }) => {
        clearBoard();
        const h2 = document.createElement("h2");
        h2.innerText = `${winner} has won the game`;

        const rematchButton = document.createElement("button");
        rematchButton.setAttribute("id", "rematch-btn")
        rematchButton.innerText = "Rematch"
        rematchButton.addEventListener("click", rematch);

        gameOverScreen.appendChild(h2);
        gameOverScreen.appendChild(rematchButton);
    })

    function rematch() {
        socket.emit("ask-for-a-rematch");
    }

    socket.on("want-a-rematch", ({ username }) =>{
        const rematchH3 = document.createElement("h3")
        const acceptBtn = document.createElement("button")
        const rejectBtn = document.createElement("button")
        document.getElementById("rematch-btn").remove();

        acceptBtn.addEventListener("click", acceptRematch);

        rematchH3.innerText = `${username} wants a rematch`
        acceptBtn.innerText = "Accept"
        rejectBtn.innerText = "Reject"

        rematchDiv.appendChild(rematchH3)
        rematchDiv.appendChild(acceptBtn)
        rematchDiv.appendChild(rejectBtn)
    })

    function acceptRematch() {
        socket.emit("rematch-accepted")
    }

    socket.on("rematch-start", ({ board }) => {
        clearBoard();
        drawBoard(board);
        Array.from(gameOverScreen.childNodes).forEach(n => n.remove());
        Array.from(rematchDiv.childNodes).forEach(n => n.remove());
    })

</script>
